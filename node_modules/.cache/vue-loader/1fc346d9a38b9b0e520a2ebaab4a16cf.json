{"remainingRequest":"C:\\Users\\Ruddy\\proyecto\\examentecno\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Ruddy\\proyecto\\examentecno\\src\\components\\category\\Buisness.vue?vue&type=template&id=5efce045&","dependencies":[{"path":"C:\\Users\\Ruddy\\proyecto\\examentecno\\src\\components\\category\\Buisness.vue","mtime":1651262953004},{"path":"C:\\Users\\Ruddy\\proyecto\\examentecno\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651186204949},{"path":"C:\\Users\\Ruddy\\proyecto\\examentecno\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651186235459},{"path":"C:\\Users\\Ruddy\\proyecto\\examentecno\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651186204949},{"path":"C:\\Users\\Ruddy\\proyecto\\examentecno\\node_modules\\vue-loader\\lib\\index.js","mtime":1651186235444}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}