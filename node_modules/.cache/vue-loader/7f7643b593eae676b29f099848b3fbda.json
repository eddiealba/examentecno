{"remainingRequest":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\src\\components\\Posts\\PostOne\\index.vue?vue&type=template&id=1bc8c566&","dependencies":[{"path":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\src\\components\\Posts\\PostOne\\index.vue","mtime":1639209490000},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651158781351},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651158781863},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651158781351},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\examentecno\\node_modules\\vue-loader\\lib\\index.js","mtime":1651158781173}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}