{"remainingRequest":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\src\\components\\category\\Trending.vue?vue&type=template&id=2fec5056&","dependencies":[{"path":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\src\\components\\category\\Trending.vue","mtime":1639209490000},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651158781351},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651158781863},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651158781351},{"path":"C:\\Users\\PC-EDDIE\\Desktop\\Newsprk v1.1\\newspark-vue-app\\node_modules\\vue-loader\\lib\\index.js","mtime":1651158781173}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxjYXRlZ29yeS1sYXlvdXQ+CiAgPHNlY3Rpb24gY2xhc3M9ImFib3V0LWl0ZW0tYXJlYSI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC1hdXRob3ItY29udGVudCBwdC0xNSI+CiAgICAgICAgICAgIDxuYXYgYXJpYS1sYWJlbD0iYnJlYWRjcnVtYiI+CiAgICAgICAgICAgICAgPG9sIGNsYXNzPSJicmVhZGNydW1iIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIj48YSBocmVmPSJpbmRleC5odG1sIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImJyZWFkY3J1bWItaXRlbSI+PGEgaHJlZj0iIyI+Q2F0ZWdvcnk8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYnJlYWRjcnVtYi1pdGVtIGFjdGl2ZSIgYXJpYS1jdXJyZW50PSJwYWdlIj4KICAgICAgICAgICAgICAgICAgdHJlbmRpbmcKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctOCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC10YWItYnRuIG10LTQwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJjaGl2ZS1idG4iPgogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgPHNwYW4+Q2F0ZWdvcnk6IDxzcGFuPnRyZW5kaW5nPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFib3V0LXBvc3QtaXRlbXMiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtaXRlbSBtYi0zMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy10aHVtYiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2VudGVydGFpbm1lbnQtZGFyay0xLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJ0cmVuZGluZyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWJvbHQiPjwvaQogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtbWV0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VEVDSE5PTE9HWTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtZGF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFyY2ggMjYsIDIwMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvcG9zdHMvcG9zdE9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGhlcmUgbWF5IGJlIG5vIGNvbnNvbGVzIGluIHRoZSBmdXR1cmUgZWEgZXhlYwogICAgICAgICAgICAgICAgICAgICAgICAgIHNheXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9wZXJ0eSwgY29tcGxldGUgd2l0aCAzMC1zZWF0IHNjcmVlbmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb20sIGEgMTAwLXNlYXQgYW1waGl0aGVhdGVyIGFuZCBhIHN3aW1taW5nIHBvbmQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBzYW5keSBzaG93ZXLigKYKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1pdGVtIG1iLTMwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZW50ZXJ0YWlubWVudC1kYXJrLTIuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InRyZW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYXMgZmEtYm9sdCI+PC9pCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1tZXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1jYXRlZ29yaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5URUNITk9MT0dZPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NYXJjaCAyNiwgMjAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9wb3N0cy9wb3N0T25lIgogICAgICAgICAgICAgICAgICAgICAgICAgID5UaGVyZSBtYXkgYmUgbm8gY29uc29sZXMgaW4gdGhlIGZ1dHVyZSBlYSBleGVjCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2F5czwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb3BlcnR5LCBjb21wbGV0ZSB3aXRoIDMwLXNlYXQgc2NyZWVuaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgcm9vbSwgYSAxMDAtc2VhdCBhbXBoaXRoZWF0ZXIgYW5kIGEgc3dpbW1pbmcgcG9uZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbmR5IHNob3dlcuKApgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWl0ZW0gbWItMzAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtdGh1bWIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9lbnRlcnRhaW5tZW50LWRhcmstMy5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0idHJlbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhcyBmYS1ib2x0Ij48L2kKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LW1ldGEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWNhdGVnb3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlRFQ0hOT0xPR1k8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1hcmNoIDI2LCAyMDIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Bvc3RzL3Bvc3RPbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlRoZXJlIG1heSBiZSBubyBjb25zb2xlcyBpbiB0aGUgZnV0dXJlIGVhIGV4ZWMKICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgcHJvcGVydHksIGNvbXBsZXRlIHdpdGggMzAtc2VhdCBzY3JlZW5pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICByb29tLCBhIDEwMC1zZWF0IGFtcGhpdGhlYXRlciBhbmQgYSBzd2ltbWluZyBwb25kIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgc2FuZHkgc2hvd2Vy4oCmCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtaXRlbSBtYi0zMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy10aHVtYiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2VudGVydGFpbm1lbnQtZGFyay00LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJ0cmVuZGluZyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWJvbHQiPjwvaQogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtbWV0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VEVDSE5PTE9HWTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtZGF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFyY2ggMjYsIDIwMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvcG9zdHMvcG9zdE9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGhlcmUgbWF5IGJlIG5vIGNvbnNvbGVzIGluIHRoZSBmdXR1cmUgZWEgZXhlYwogICAgICAgICAgICAgICAgICAgICAgICAgIHNheXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9wZXJ0eSwgY29tcGxldGUgd2l0aCAzMC1zZWF0IHNjcmVlbmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb20sIGEgMTAwLXNlYXQgYW1waGl0aGVhdGVyIGFuZCBhIHN3aW1taW5nIHBvbmQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBzYW5keSBzaG93ZXLigKYKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1pdGVtIG1iLTMwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZW50ZXJ0YWlubWVudC1kYXJrLTUuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InRyZW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYXMgZmEtYm9sdCI+PC9pCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1tZXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1jYXRlZ29yaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5URUNITk9MT0dZPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NYXJjaCAyNiwgMjAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9wb3N0cy9wb3N0T25lIgogICAgICAgICAgICAgICAgICAgICAgICAgID5UaGVyZSBtYXkgYmUgbm8gY29uc29sZXMgaW4gdGhlIGZ1dHVyZSBlYSBleGVjCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2F5czwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb3BlcnR5LCBjb21wbGV0ZSB3aXRoIDMwLXNlYXQgc2NyZWVuaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgcm9vbSwgYSAxMDAtc2VhdCBhbXBoaXRoZWF0ZXIgYW5kIGEgc3dpbW1pbmcgcG9uZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbmR5IHNob3dlcuKApgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWl0ZW0gbWItMzAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtdGh1bWIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9lbnRlcnRhaW5tZW50LWRhcmstNi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0idHJlbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhcyBmYS1ib2x0Ij48L2kKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LW1ldGEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWNhdGVnb3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlRFQ0hOT0xPR1k8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1hcmNoIDI2LCAyMDIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Bvc3RzL3Bvc3RPbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlRoZXJlIG1heSBiZSBubyBjb25zb2xlcyBpbiB0aGUgZnV0dXJlIGVhIGV4ZWMKICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgcHJvcGVydHksIGNvbXBsZXRlIHdpdGggMzAtc2VhdCBzY3JlZW5pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICByb29tLCBhIDEwMC1zZWF0IGFtcGhpdGhlYXRlciBhbmQgYSBzd2ltbWluZyBwb25kIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgc2FuZHkgc2hvd2Vy4oCmCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtaXRlbSBtYi0zMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy10aHVtYiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2VudGVydGFpbm1lbnQtZGFyay03LmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJ0cmVuZGluZyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWJvbHQiPjwvaQogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtbWV0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VEVDSE5PTE9HWTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtZGF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFyY2ggMjYsIDIwMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvcG9zdHMvcG9zdE9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGhlcmUgbWF5IGJlIG5vIGNvbnNvbGVzIGluIHRoZSBmdXR1cmUgZWEgZXhlYwogICAgICAgICAgICAgICAgICAgICAgICAgIHNheXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9wZXJ0eSwgY29tcGxldGUgd2l0aCAzMC1zZWF0IHNjcmVlbmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb20sIGEgMTAwLXNlYXQgYW1waGl0aGVhdGVyIGFuZCBhIHN3aW1taW5nIHBvbmQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBzYW5keSBzaG93ZXLigKYKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1pdGVtIG1iLTMwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZW50ZXJ0YWlubWVudC1kYXJrLTEuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InRyZW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYXMgZmEtYm9sdCI+PC9pCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1tZXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1jYXRlZ29yaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5URUNITk9MT0dZPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NYXJjaCAyNiwgMjAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9wb3N0cy9wb3N0T25lIgogICAgICAgICAgICAgICAgICAgICAgICAgID5UaGVyZSBtYXkgYmUgbm8gY29uc29sZXMgaW4gdGhlIGZ1dHVyZSBlYSBleGVjCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2F5czwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb3BlcnR5LCBjb21wbGV0ZSB3aXRoIDMwLXNlYXQgc2NyZWVuaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgcm9vbSwgYSAxMDAtc2VhdCBhbXBoaXRoZWF0ZXIgYW5kIGEgc3dpbW1pbmcgcG9uZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbmR5IHNob3dlcuKApgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWl0ZW0gbWItMzAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtdGh1bWIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9lbnRlcnRhaW5tZW50LWRhcmstMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0idHJlbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhcyBmYS1ib2x0Ij48L2kKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LW1ldGEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWNhdGVnb3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlRFQ0hOT0xPR1k8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1hcmNoIDI2LCAyMDIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Bvc3RzL3Bvc3RPbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlRoZXJlIG1heSBiZSBubyBjb25zb2xlcyBpbiB0aGUgZnV0dXJlIGVhIGV4ZWMKICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgcHJvcGVydHksIGNvbXBsZXRlIHdpdGggMzAtc2VhdCBzY3JlZW5pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICByb29tLCBhIDEwMC1zZWF0IGFtcGhpdGhlYXRlciBhbmQgYSBzd2ltbWluZyBwb25kIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgc2FuZHkgc2hvd2Vy4oCmCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtaXRlbSBtYi0zMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy10aHVtYiI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2VudGVydGFpbm1lbnQtZGFyay0zLmpwZyIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJ0cmVuZGluZyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGFiaW5kZXg9Ii0xIgogICAgICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWJvbHQiPjwvaQogICAgICAgICAgICAgICAgICAgICAgICA+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtbWV0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+VEVDSE5PTE9HWTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldGEtZGF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TWFyY2ggMjYsIDIwMjA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvcG9zdHMvcG9zdE9uZSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+VGhlcmUgbWF5IGJlIG5vIGNvbnNvbGVzIGluIHRoZSBmdXR1cmUgZWEgZXhlYwogICAgICAgICAgICAgICAgICAgICAgICAgIHNheXM8L3JvdXRlci1saW5rCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9wZXJ0eSwgY29tcGxldGUgd2l0aCAzMC1zZWF0IHNjcmVlbmluZyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb20sIGEgMTAwLXNlYXQgYW1waGl0aGVhdGVyIGFuZCBhIHN3aW1taW5nIHBvbmQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBzYW5keSBzaG93ZXLigKYKICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJlbmRpbmctbmV3cy1pdGVtIG1iLTMwIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZW50ZXJ0YWlubWVudC1kYXJrLTQuanBnIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InRyZW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiB0YWJpbmRleD0iLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYXMgZmEtYm9sdCI+PC9pCiAgICAgICAgICAgICAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1tZXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1jYXRlZ29yaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj5URUNITk9MT0dZPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0YS1kYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NYXJjaCAyNiwgMjAyMDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9wb3N0cy9wb3N0T25lIgogICAgICAgICAgICAgICAgICAgICAgICAgID5UaGVyZSBtYXkgYmUgbm8gY29uc29sZXMgaW4gdGhlIGZ1dHVyZSBlYSBleGVjCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2F5czwvcm91dGVyLWxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb3BlcnR5LCBjb21wbGV0ZSB3aXRoIDMwLXNlYXQgc2NyZWVuaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgcm9vbSwgYSAxMDAtc2VhdCBhbXBoaXRoZWF0ZXIgYW5kIGEgc3dpbW1pbmcgcG9uZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbmR5IHNob3dlcuKApgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmVuZGluZy1uZXdzLWl0ZW0gbWItMzAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtdGh1bWIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9lbnRlcnRhaW5tZW50LWRhcmstNS5qcGciCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0idHJlbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRhYmluZGV4PSItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhcyBmYS1ib2x0Ij48L2kKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyZW5kaW5nLW5ld3MtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LW1ldGEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWNhdGVnb3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlRFQ0hOT0xPR1k8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhLWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1hcmNoIDI2LCAyMDIwPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Bvc3RzL3Bvc3RPbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlRoZXJlIG1heSBiZSBubyBjb25zb2xlcyBpbiB0aGUgZnV0dXJlIGVhIGV4ZWMKICAgICAgICAgICAgICAgICAgICAgICAgICBzYXlzPC9yb3V0ZXItbGluawogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgcHJvcGVydHksIGNvbXBsZXRlIHdpdGggMzAtc2VhdCBzY3JlZW5pbmcgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICByb29tLCBhIDEwMC1zZWF0IGFtcGhpdGhlYXRlciBhbmQgYSBzd2ltbWluZyBwb25kIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgc2FuZHkgc2hvd2Vy4oCmCiAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxuYXYgYXJpYS1sYWJlbD0iUGFnZSBuYXZpZ2F0aW9uIGV4YW1wbGUiPgogICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0gYWN0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icGFnZS1saW5rIiBocmVmPSIjIj4wMTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9IiMiPjAyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBhZ2UtbGluayIgaHJlZj0iIyI+Li4uPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBhZ2UtbGluayIgaHJlZj0iIyI+NTA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icGFnZS1saW5rIiBocmVmPSIjIiBhcmlhLWxhYmVsPSJOZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhcyBmYS1jYXJldC1yaWdodCI+PC9pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9uYXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPgogICAgICAgICAgPHN0eWxlLW9uZSA6ZGF0YXM9InBvc3RzLnNsaWNlKDEsIDYpIiA6c2hhcmVQb3N0PSJmYWxzZSIgLz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CjwvY2F0ZWdvcnktbGF5b3V0Pgo="},null]}